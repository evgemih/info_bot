# -*- coding: utf-8 -*-
"""
Info bot

@author: evgemih
"""

import logging
from datetime import datetime
from pathlib import Path
from aiogram import types, F, Router, html, flags
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from handlers import default_commands
from expert.system import expert
from settings.base import config

router = Router()


# –û–ø—Ä–µ–¥–µ–ª–∏–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ
class UserStates(StatesGroup):
    start = State()
    input = State()
    explain = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_inline_keyboard(data_dict) -> types.InlineKeyboardMarkup:
    buttons = []
    for k, v in data_dict.items():
        buttons.append([types.InlineKeyboardButton(
            text=k, 
            callback_data=v
            )])
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

    
def get_options_keyboard(options_list) -> types.ReplyKeyboardMarkup:
    button_data = {}
    for i, text in enumerate(options_list):
        button_data[text] = f'select_{i}'
    return get_inline_keyboard(button_data)


@router.message(F.text.lower() == "–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
async def button_restart(message: types.Message, state: FSMContext) -> None:
    await default_commands.cmd_start(message, state)


@router.message(F.text.lower() == "–ø–æ–º–æ—â—å")
async def button_help(message: types.Message, state: FSMContext) -> None:
    await default_commands.cmd_help(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(UserStates.start)
async def start_state(message: types.Message, state: FSMContext) -> None:
    logging.debug('–û–±—Ä–∞–±–æ—Ç–∫–∞ start_state')
    expert.reset()
    await state.set_state(UserStates.input)
    # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫ –Ω–µ–º—É
    kb = types.ReplyKeyboardRemove()
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:", reply_markup = kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–≤–æ–¥–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
@router.message(UserStates.explain)
async def explain_state(message: types.Message, state: FSMContext) -> None:
    logging.debug('–û–±—Ä–∞–±–æ—Ç–∫–∞ explain_state')
    await state.set_state(UserStates.input)
    await message.answer(
        expert.get_explain(), 
        parse_mode=ParseMode.HTML, 
        )
        

# –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –æ–¥–Ω–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫, –≥–¥–µ data –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ "select_"
@router.callback_query(F.data.startswith("select_"))
async def msg_change(callback: types.CallbackQuery, state: FSMContext) -> None:
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞, —Ä–∞–∑–¥–µ–ª–∏–≤ –ø–æ –∑–Ω–∞–∫—É _
    select_n = int(callback.data.split("_")[1])
    option_text = callback.message.reply_markup.inline_keyboard[select_n][0].text
    logging.info('–í—ã–±—Ä–∞–Ω–æ -> ' + option_text)

    msg_text = callback.message.text.strip()
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ—á–∫–∏, –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ü–µ
    if not msg_text.endswith(('.',',','?')):
        # –¥–æ–±–∞–≤–∏–º —Ç–æ—á–∫—É, —á—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞ –º–æ–≥–ª–∞ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è
        msg_text += '.'

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ –¥–∏—Å–∫
    outfile = Path(config.data_path, datetime.now().strftime('%Y-%m-%d')+'.txt')
    try:
        with open(outfile, 'a', encoding='UTF-8') as f:  #,encoding='cp1251'
            f.write(' ' + option_text)
    except IOError as error:
        logging.error(error)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å
    expert.add_text_data(option_text)

        
    # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    new_msg_text = f"{msg_text} {option_text}"
    new_msg_text_html = f"{msg_text} {html.bold(html.quote(option_text))}"
    
    logging.debug('msg_change <<< ' + new_msg_text)
    try:
        data = expert.get_answer(new_msg_text)
    except Exception as e:
        logging.error(e)    
    
    kb = types.ReplyKeyboardRemove()
    if data:
        for item in data:
            options = item.get('options')
            await state.update_data(answer_options=options)
            if options:
                kb = get_options_keyboard(options)
    
    msg = await callback.message.edit_text(
        text = new_msg_text_html, 
        parse_mode = ParseMode.HTML,
        reply_markup = kb
    )
    await state.update_data(prev_msg=msg)
    await state.update_data(prev_datetime = datetime.now())
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã—à–µ
@router.message()
async def input_state(message: types.Message, state: FSMContext) -> None:
    # msg = await message.answer("‚è≥ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
    logging.debug('input_state <<< ' + message.text)

    # user_name = message.chat.first_name + ' ' + message.chat.last_name
    user_name = message.from_user.full_name

    msg_text = message.text.strip()
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ—á–∫–∏, –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ü–µ
    if not msg_text.endswith(('.',',','?')):
        # –¥–æ–±–∞–≤–∏–º —Ç–æ—á–∫—É, —á—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞ –º–æ–≥–ª–∞ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è
        msg_text += '.'
    
    # –ú–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å message.date, –Ω–æ –æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ UT–°+0
    msg_datetime = datetime.now()
    str_datetime = msg_datetime.strftime('%d.%m.%Y %H:%M')
    # text_to_write = f'{user_name}, [{str_datetime}]\r\n{message.text}\r\n\r\n'
    text_to_write = f'\r\n\r\n{user_name}, [{str_datetime}]\r\n{msg_text} '

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ –¥–∏—Å–∫ –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    outfile = Path(config.data_path, datetime.now().strftime('%Y-%m-%d')+'.txt')
    try:
        with open(outfile, 'a', encoding='UTF-8') as f:  #, encoding='cp1251'
            f.write(text_to_write)
    except IOError as error:
        logging.error(error)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞–º—è—Ç—å —Å–∏—Å—Ç–µ–º—ã
    expert.add_text_data(text_to_write)

    # –ü–æ–ª—É—á–µ–º –æ—Ç–≤–µ—Ç
    try:
        data = expert.get_answer(message.text)
    except Exception as e:
        logging.error(e)
        data = None

    if not data:
        return await message.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", reply_markup=None)
    
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    for item in data:
        text = item.get('text')
        options = item.get('options')
        await state.update_data(answer_options=options)
        
        user_data = await state.get_data()            
        prev_msg = user_data.get('prev_msg')
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        if prev_msg:
            try:
                await prev_msg.edit_text(text = prev_msg.text, reply_markup = None)
            except Exception as e:
                logging.error(e)
                
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        kb = types.ReplyKeyboardRemove()
        if options:
            kb = get_options_keyboard(options)

        # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫ –Ω–µ–º—É
        msg = await message.answer(text, reply_markup = kb)
        await state.update_data(prev_msg=msg)

